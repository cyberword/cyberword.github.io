<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on A Coder</title>
    <link>https://cyberword.github.io/tags/java/</link>
    <description>Recent content in JAVA on A Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 19 Nov 2020 20:11:38 +0800</lastBuildDate><atom:link href="https://cyberword.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Netty4源码解读 EventLoop篇</title>
      <link>https://cyberword.github.io/post/netty4%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-eventloop%E7%AF%87/</link>
      <pubDate>Thu, 19 Nov 2020 20:11:38 +0800</pubDate>
      
      <guid>https://cyberword.github.io/post/netty4%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-eventloop%E7%AF%87/</guid>
      <description>EventLoop是Netty Server用于处理IO事件的事件轮询处理器，职责上类似于Redis的eventLoop，EventLoop通常是由EventLoopGroup来管理的，EventLoopGroup负责调度指派EventLoop，而EventLoop负责具体的执行。
先看一下常用的NioEventLoopGroup结构关系图 继承关系： 方法图： 顺着关系图，先从各组件的基础功能说起。
EventExecutorGroup 自身提供shutdownGracefully执行器优雅关闭得接口
EventExecutorGroup接口继承ScheduleExecutorService和Iterable ScheduleExecutorService负责任务调度 Iterable负责返回next()的EventExecutor对象
EventExecutor EventExecutor继承EventExecutorGroup，在原有的接口基础上提供一些查看线程状态的接口
AbstractEventExecutorGroup AbstractEventExecutorGroup是基于EventExecutorGroup的抽象类，提供简单的任务调用，主要是一些通过next()获取Executor并执行任务的简单模板，如下
@Override public &amp;lt;T&amp;gt; Future&amp;lt;T&amp;gt; submit(Runnable task, T result) { return next().submit(task, result); } MultithreadEventExecutorGroup 继承AbstractEventExecutorGroup的简单抽象类，初始化children，该字段保存EventLoop数组。提供缺省的线程工厂和Executor，还有一些批量处理children的实现（比如shutdown）
需要特殊注意的是，创建的EventLoop的接口声明也是在这个抽象类中
protected abstract EventExecutor newChild(Executor executor, Object... args) throws Exception; 最终NioEventLoopGroup构造器都会进入下面的父类构造器
protected MultithreadEventExecutorGroup(int nThreads, Executor executor, EventExecutorChooserFactory chooserFactory, Object... args) {  nThread指定EventExecutor个数 executor指定执行器，默认使用ThreadPerTaskExecutor执行器，提供最基本的线程执行功能 chooserFactory生产EventExecutorChooser，chooser主要功能就是从executors列表中获取下一个EventExecutor（根据列表个数是否位2次幂选择PowerOfTwoEventExecutorChooser或GenericEventExecutorChooser），常用于next()方法用于获取下一个EventLoop args主要是提供构造Java Selector的SelectorProvider  MultithreadEventLoopGroup MultithreadEventLoopGroup继承MultithreadEventExecutorGroup接口，并实现EventLoopGroup接口，提供Channel注册相关的模板。
NioEventLoopGroup NioEventLoopGroup就是常见的Bootstrap(或ServerBootstrap)用于构造group()的实现类，其中实现了newChild接口用于创建具体的EventLoop实例。
@Override protected EventLoop newChild(Executor executor, Object... args) throws Exception { EventLoopTaskQueueFactory queueFactory = args.</description>
    </item>
    
  </channel>
</rss>
